{"name":"Tealium hybris Integration","tagline":"Adding TealiumIQ to hybris","body":"HybrisIntegration\r\n=================\r\n\r\nHybris Integration for TealiumIQ\r\n\r\nThis is a simple setup guide to integrate the tealiumiqaddon addon for Hybris. To setup tealiumiqaddon to work with your vendors after successful install, please contact your account manager.\r\n\r\n--\r\n###Prerequisites###\r\n\r\n - A Tealium IQ account.\r\n - hybris v5.0.1+ extracted and built, including the B2C Commerce Accelerator.\r\n\r\n\r\n--\r\n###Installing Addon###\r\n1. Place the \"tealiumiqaddon\" directory into ```${HYBRIS_BIN}/custom```. This directory is in the ```/hybris/bin/custom/``` folder in this repo.\r\n2. Add ```<extension dir=\"${HYBRIS_BIN}/custom/tealiumiqaddon\"/\\>``` to your ```config/localextensions.xml```.\r\n3. Add tealiumiqaddon to yacceleratorstorefront by using: \r\n - ```sudo ant addoninstall -Daddonnames=\"tealiumiqaddon\" -DaddonStorefront.yacceleratorstorefront=\"yacceleratorstorefront\"```\r\n4. Update Files: \r\n - ```${HYBRIS_BIN}/ext-template/yacceleratorstorefront/web/webroot/WEB-INF/tags/desktop/template/master.tag``` by adding:\r\n   \t\t1. ```<%@ taglib prefix=\"tealiumiqaddon\" tagdir=\"/WEB-INF/tags/addons/tealiumiqaddon/shared/analytics\" %>``` at the top of the file\r\n    \t2. ```<tealiumiqaddon:sync/>``` after the ```<head>``` tag\r\n    \t3. ```<tealiumiqaddon:tealium/>``` after the ```<body>``` tag\r\n - ```${HYBRIS_BIN}/custom/tealiumiqaddon/project.properties.template``` by changing:\r\n   \t\t1. **tealiumiqaddon.account**, **tealiumiqaddon.profile**, and **tealiumiqaddon.target** to your tealiumIQ account specific information.\r\n    \t2. modify ```tealiumiqaddon.utagSyncEnabled = 1``` if you want to enable **utag.sync.js** injection into the ```<head>``` \r\n\r\n--\r\n###Adding Custom Data###\r\n\r\nBy default, the addon provides a comprehensiv list of standard e-commerce variables. If these default values are not enough for your installation, you can extend the default page types as well as create new custom page types.\r\n\r\n1. Create a new class implementing the interface ```com.tealium.dataconnector.hybris.HybrisDataConverter.HybrisCustomDataConverter``` and implement all methods of the interface.\r\n\r\n\texample:\r\n\r\n\t```\r\n\tpackage com.tealium.dataconnector.hybris;\r\n\timport com.tealium.dataconnector.hybris.HybrisDataConverter.HybrisCustomDataConverter;\r\n\timport com.tealium.dataconnector.hybris.HybrisDataConverter.HybrisCustomPageTypeCustomData;\r\n\timport com.tealium.util.udohelpers.UDO;\r\n\timport com.tealium.util.udohelpers.exceptions.UDOUpdateException;\r\n\r\n\tpublic class TealiumCustomData implements HybrisCustomDataConverter {\r\n\t\t... add unimplemented methods of interface.\r\n\t}\r\n\t```\r\n2. Make sure **if you are not adding values** to any of the methods of the interface, return the ```udo``` object.\r\n\r\n\texample:\r\n\t\r\n\t```\r\n\t@Override\r\n\tpublic UDO homePage(UDO udo) {\r\n\t\treturn udo;\r\n\t}\r\n\t```\r\n\r\n3. To add or modify values to a default page, add to the override method for that page:\r\n\r\n\texample:\r\n\t\r\n\t```\r\n\t@Override\r\n\tpublic UDO searchPage(UDO udo) {\r\n\t\ttry {\r\n\t\t\tudo.setValue(\"page_name\", \"new search page name\");\r\n\t\t\tudo.setValue(\"custom_key\", \"custom_value\");\r\n\t\t} catch (UDOUpdateException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn udo;\r\n\t}\r\n\t```\r\n\r\n4. To add a new page type with values, add a static variable to your class and add new pages to the ```addCustomPages``` method\r\n\r\n\texample:\r\n\t\r\n\t```\r\n\tpublic class TealiumCustomData implements HybrisCustomDataConverter {\r\n\t\tprivate static Map<String, HybrisCustomPageTypeCustomData> customPagesMap;\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic Map<String, HybrisCustomPageTypeCustomData> getHybrisCustomPageTypes() {\r\n\t\t\treturn customPagesMap;\r\n\t\t}\r\n\t\t... other methods\r\n\t\t@Override\r\n\t\tpublic void addCustomPages() {\r\n\t\t\tif (customPagesMap == null){\r\n\t\t\t\tcustomPagesMap = new HashMap<>();\r\n\t\t\t}\r\n\t\t\tcustomPagesMap.put(\"custom_one\", new HybrisCustomPageTypeCustomData(){\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic UDO getCustomDataUdo(UDO udo) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tudo.setValue(\"page_name\", \"custom page 1\");\r\n\t\t\t\t\t\tudo.setValue(\"custom_page1_key\", \"custom value\");\r\n\t\t\t\t\t} catch (UDOUpdateException e) {\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn udo;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\tcustomPagesMap.put(\"custom_two\", new HybrisCustomPageTypeCustomData(){\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic UDO getCustomDataUdo(UDO udo) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tudo.setValue(\"page_name\", \"custom page 2\");\r\n\t\t\t\t\t\tudo.setValue(\"custom_page2_key\", \"custom value\");\r\n\t\t\t\t\t} catch (UDOUpdateException e) {\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn udo;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\t\t\r\n\t\t}\r\n\t}\r\n\t```\r\n\r\n5. Modify: ```${HYBRIS_BIN}/custom/tealiumiqaddonweb/webroot/WEB-INF/tags/addons/tealiumiqaddon/shared/analytics/data.tag```\r\n\t* \tadd your new class: ```<%@ tag import=\"com.tealium.dataconnector.hybris.CLASS_NAME\" %>```\r\n\t*\tregister the new class with HybrisDataConverter: ```<% HybrisDataConverter.registerCustomDataClass(\"ID\", new CLASS_NAME()); %>```\r\n\r\n\r\n**In this repo, there is a ```custom-data``` branch with an already built custom class**\r\n\r\n--\r\n###Finish###\r\nRebuild and restart hybris.\r\n\r\n```sudo ant all```\r\n\r\n```sudo ./hybrisserver.sh```\r\n\r\n--\r\n###Deafult data sources###\r\n\r\n***All Pages***\r\n\r\n```\r\npage_name\r\nContains a user-friendly page name\r\n```\r\n```\r\nsite_region\r\nIncludes values for region or localized version, e.g. en_US\r\n```\r\n```\r\nsite_currency\r\nContains the currency shown on site, e.g. USD\r\n```\r\n```\r\npage_type\r\nContains a user-friendly page type, e.g. cart page\r\n```\r\n--\r\n--\r\n***Search Page***\r\n\r\n```\r\nsearch_results\r\nContains the number of results returned with a search query\r\n```\r\n```\r\nsearch_keyword\r\nContains the search query conducted by user\r\n```\r\n--\r\n--\r\n***Category Pages***\r\n\r\n```\r\npage_category_name\r\nContains a user-friendly category name, e.g. appliances\r\n```\r\n--\r\n--\r\n***Product Page***\r\n\r\n```\r\nproduct_id\r\nContains product ID(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_sku\r\nContains product SKU(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_name\r\nContains product name(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_brand\r\nContains product brand(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_category\r\nContains product category(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_subcategory\r\nContains product subcategory(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_unit_price\r\nContains product unit price(s) - multiple values should be comma-separated\r\n```\r\n--\r\n--\r\n***Cart Page***\r\n\r\n```\r\nproduct_id\r\nContains product ID(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_sku\r\nContains product SKU(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_name\r\nContains product name(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_brand\r\nContains product brand(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_category\r\nContains product category(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_subcategory\r\nContains product subcategory(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_unit_price\r\nContains product unit price(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_quantity\r\nContains product quantity(s) - multiple values should be comma-separated\r\n```\r\n--\r\n--\r\n***Order Confirmation***\r\n\r\n```\r\norder_id\r\nContains the order or transaction ID\r\n```\r\n```\r\norder_subtotal\r\nContains the order payment type\r\n```\r\n```\r\norder_payment_type\r\nContains the order payment type\r\n```\r\n```\r\norder_total\r\nContains the order total value\r\n```\r\n```\r\norder_discount\r\nContains the order discount (if any)\r\n```\r\n```\r\norder_shipping\r\nContains the order shipping value\r\n```\r\n```\r\norder_tax\r\nContains the order tax amount\r\n```\r\n```\r\norder_currency\r\nContains the currency associated with the transaction, e.g. USD'\r\n```\r\n```\r\norder_coupon_code\r\nContains the order coupon code\r\n```\r\n```\r\norder_type\r\nContains the order/cart\r\n```\r\n\r\n```\r\nproduct_id\r\nContains product ID(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_sku\r\nContains product SKU(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_name\r\nContains product name(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_brand\r\nContains product brand(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_category\r\nContains product category(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_subcategory\r\nContains product subcategory(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_unit_price\r\nContains product unit price(s) - multiple values should be comma-separated\r\n```\r\n```\r\nproduct_quantity\r\nContains product quantity(s) - multiple values should be comma-separated\r\n```\r\n```\r\ncustomer_email\r\nContains the customer email\r\n```\r\n--\r\n--\r\n***Customer Info Page***\r\n\r\n```\r\ncustomer_name\r\nContains the customer username\r\n```\r\n```\r\ncustomer_email\r\nContains the customer email\r\n```\r\n```\r\ngender\r\nContains the customer gender based on salutation\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}